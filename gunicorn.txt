from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/api', methods=['GET'])
def api():
    return jsonify({'message': 'Hello, World!'})

if __name__ == '__main__':
    app.run()


pip install flask

python3 -m venv env
source env/bin/activate
pip install flask gunicorn

pip freeze > requirements.txt

ssh -i /path/to/your-key-pair.pem ec2-user@your-ec2-public-dns

sudo yum update -y

sudo yum install git python3 -y
Clone Your Repository


git clone https://github.com/your-repo/your-flask-app.git
cd your-flask-app
Set Up a Virtual Environment on EC2


python3 -m venv env
source env/bin/activate
pip install -r requirements.txt

Step 5: Configure Gunicorn
Create a Gunicorn Start Script (gunicorn_start.sh)


#!/bin/bash
source /home/ec2-user/your-flask-app/env/bin/activate
exec gunicorn -w 3 -b 0.0.0.0:8000 app:app

Make the Script Executable
chmod +x gunicorn_start.sh


Step 6: Set Up Nginx
Install Nginx


sudo yum install nginx -y
Configure Nginx


sudo vim /etc/nginx/nginx.conf
Add the following server block:


server {
    listen 80;
    server_name your_domain_or_IP;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Start and Enable Nginx


sudo systemctl start nginx
sudo systemctl enable nginx


Step 7: Create a Systemd Service for Gunicorn

Create a Gunicorn Service File

sudo nano /etc/systemd/system/gunicorn.service
Add the following content:

[Unit]
Description=Gunicorn instance to serve my flask app
After=network.target

[Service]
User=ec2-user
Group=nginx
WorkingDirectory=/home/ec2-user/your-flask-app
Environment="PATH=/home/ec2-user/your-flask-app/env/bin"
ExecStart=/home/ec2-user/your-flask-app/gunicorn_start.sh

[Install]
WantedBy=multi-user.target
Start and Enable the Gunicorn Service

sudo systemctl start gunicorn
sudo systemctl enable gunicorn


Troubleshooting Steps

source /home/ec2-user/your-flask-app/env/bin/activate
which gunicorn


Double-check the content of the service file /etc/systemd/system/gunicorn.service:

[Unit]
Description=Gunicorn instance to serve my flask app
After=network.target

[Service]
User=ec2-user
Group=nginx
WorkingDirectory=/home/ec2-user/your-flask-app
Environment="PATH=/home/ec2-user/your-flask-app/env/bin"
ExecStart=/home/ec2-user/your-flask-app/env/bin/gunicorn -w 3 -b 0.0.0.0:8000 app:app

[Install]
WantedBy=multi-user.target

Check System Logs for Detailed Errors:-
sudo journalctl -u gunicorn.service

sudo systemctl daemon-reload
sudo systemctl restart gunicorn

chmod +x /home/ec2-user/your-flask-app/env/bin/gunicorn


sudo systemctl daemon-reload
sudo systemctl restart gunicorn


list of ports:-
sudo ss -tuln

Check Nginx Logs:
sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/log/nginx/access.log

**************************************
************************************************
***********************************************************
sudo yum update -y
sudo amazon-linux-extras install docker
sudo service docker start
sudo usermod -aG docker ec2-user


dockerfile:--
# Use an official Python runtime as a parent image
FROM python:3.8-slim

# Set the working directory
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["gunicorn", "-w", "3", "-b", "0.0.0.0:8000", "app:app"]

docker build -t flask-app .

docker run -d -p 8080:8000 flask-app

curl http://your-ec2-public-ip:8080
